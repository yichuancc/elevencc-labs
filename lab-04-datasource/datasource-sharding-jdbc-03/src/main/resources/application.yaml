spring:
  # ShardingSphere 配置项
  shardingsphere:
    #打印SQL
    props:
      sql-show: true
    datasource:
      # 所有数据源的名字
      names: ds-orders-0, ds-orders-1
      # 订单 orders 数据源配置 00
      ds-orders-0:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/test03_orders_0?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8
        username: root
        password: root
      # 订单 orders 数据源配置 01
      ds-orders-1:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/test03_orders_1?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8
        username: root
        password: root
    # 分片规则
    rules:
      sharding:
        # 表的分片策略
        tables:
          # orders 表配置
          orders:
            # actualDataNodes: ds-orders-$->{0..1}.orders_$->{0..4} # 映射到 ds-orders 数据源的 orders 表
            # actualDataNodes: ds-orders-0.orders_0, ds-orders-0.orders_2, ds-orders-0.orders_4, ds-orders-0.orders_6, ds-orders-1.orders_1, ds-orders-1.orders_3, ds-orders-1.orders_5, ds-orders-1.orders_7
            actual-data-nodes: ds-orders-0.orders_$->{[0,2,4,6]}, ds-orders-1.orders_$->{[1,3,5,7]} # 映射到 ds-orders-0 和 ds-orders-1 数据源的orders表
            table-strategy: #分表策略
              standard: # 用于单分片键的标准分片场景
                sharding-column: user_id # 分片列名称
                sharding-algorithm-name: user_id_inline # 分片算法名称
            key-generate-strategy: # 主键生成策略
              column: id # 主键列
              key-generator-name: snowflake # 策略算法名称
            database-strategy: #分库策略
              standard:
                sharding-column: user_id #分片列名称
                sharding-algorithm-name: database_inline #分片算法名称
          # dict_config 表配置
          dict_config:
            key-generate-strategy: # 主键生成策略
              column: id # 主键列
              key-generator-name: snowflake # 策略算法名称
        # 主键策略算法配置
        key-generators:
          snowflake:
            type: SNOWFLAKE
        # 分片算法
        sharding-algorithms:
          database_inline:
            type: INLINE # 分片算法类型
            props:
              algorithm-expression: ds-orders-$->{user_id % 2} # 分片算法属性配置
          user_id_inline:
            type: INLINE # 分片算法类型
            props:
              algorithm-expression: orders_$->{user_id % 8} # 分片算法属性配置
        #广播表
        broadcast-tables:
          - dict_config

# mybatis 配置内容
mybatis:
  config-location: classpath:mybatis-config.xml # 配置 MyBatis 配置文件路径
  mapper-locations: classpath:mapper/*.xml # 配置 Mapper XML 地址
  type-aliases-package: cn.elevencc.springboot.datasource.pojo # 配置数据库实体包路径
